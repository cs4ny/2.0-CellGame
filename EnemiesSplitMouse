#Project Cell Game
import pygame
import cellGameClasses as cg
import random as r
import collisionDetection as cd
import math

# GLOBAL CONSTANTS
COLOUR = [ (255, 255, 255), (0, 0, 0), (96, 96, 96), (255, 0, 0), (0, 255, 0),
            (0, 0, 255), (255, 255, 0), (255, 0, 255), (255, 128, 0) ]

WHITE = 0
BLACK = 1
GREY = 2
RED = 3
GREEN = 4
BLUE = 5
YELLOW = 6
PURPLE = 7
ORANGE = 8

SCREEN_WIDTH = 2500
SCREEN_HEIGHT = 1000
SCREEN_SIZE = (SCREEN_WIDTH,SCREEN_HEIGHT)

FPS = 30

# GAME CLASS
class Game():

    def __init__(self):
        """ Constructor for Game Class """

        # Initialize pygame, screen and clock
        pygame.init()
        self.screen = pygame.display.set_mode(SCREEN_SIZE)
        clock = pygame.time.Clock()

        # Initialize all variables to starting values
        self.initialize()

        loop = True
        while loop:
            # Process Events / Game Logic / Draw / Pause 
            loop = self.processEvents()
            self.runLogic()
            self.displayFrame()
            clock.tick(FPS)

        # Close window and exit
        pygame.quit()
        
    # end __init__()


    def initialize(self):
        """ Set all variables for beginning of game. """

        
        #Create an Enemies Cells List
        self.enemiesList = []
        self.enemies = cg.Cell(r.randrange(100, SCREEN_WIDTH-150),r.randrange(100, SCREEN_HEIGHT-150),150,3,3,COLOUR[YELLOW])
        self.enemiesList.append(self.enemies)
      

        #Initialize self.timer
        self.timer = False
        self.time = 0
            
        self.edx = 1
        self.edy = 1
        
    # end initialize()


    def processEvents(self):

        loop = True

        # EVENT HANDLING
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                loop = False

            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE:
                    #Set an empty List for size calculation
                    self.sList = []

                    #Append enmeis' sizes into size list
                                
                    for enemies in self.enemiesList:
                        self.sList.append(enemies.size)

                    #Take the sum of all enemeis'sizes and divide by len + 1
                    self.splitSz = (sum(self.sList)) // (len(self.enemiesList)+1)

                    #Update enemies'size
                    for enemies in self.enemiesList:
                        enemies.size = self.splitSz
                    
                    if self.mouseX < self.enemies.x:
                        self.edx *= -1

                    if self.mouseY < self.enemies.y:
                        self.edy *= -1

                    print(self.edx)
                    print(self.edy)

                        
                    #Adding a new enemies cell
                    self.nEnemies = cg.Cell(self.enemies.x+self.splitSz,self.enemies.y+self.splitSz,self.splitSz,(self.edx*6),(self.edy*6),COLOUR[RED])

                    self.edx = 1
                    self.edy = 1

                    #Append new enemies cell to the playerList
                    self.enemiesList.append(self.nEnemies)
                    self.timer = True
            
        return loop

    # end processEvents()


    def runLogic(self):

        #Update Enemies Cells
        for enemies in self.enemiesList:
            enemies.update(self.screen)
                        

        if self.timer:
            self.time += 0.1

        #Mouse Position
        self.mousePosition = pygame.mouse.get_pos()
        self.mouseX = self.mousePosition[0]
        self.mouseY = self.mousePosition[1]
            
        if self.time > 5:
            #Reconnection of Enemies'cells
            for eindex in range (len(self.enemiesList)):
                #Check if out of list
                if eindex < (len(self.enemiesList)-1):
                    #Non - collision of 2 players'cell
                    if cd.ecircleCollision(self.enemiesList[eindex],self.enemiesList[eindex+1]) == False:
                        self.e1x = self.enemiesList[0].x
                        self.e1y = self.enemiesList[0].y
                        self.e2x = self.enemiesList[eindex+1].x
                        self.e2y = self.enemiesList[eindex+1].y

                        #X and Y differences from mouse to object
                        self.xdifference = abs(self.e1x - self.e2x)
                        self.ydifference = abs(self.e1y - self.e2y)

                        #Check if the xdifference is 0
                        if self.xdifference == 0:
                            self.xdifference = 1
                            
                        #Ratio for figuring out the angle 
                        self.ratio = self.ydifference / self.xdifference

                        #Distance between object and mouse in a right triangle
                        self.distance = math.sqrt( math.pow(self.xdifference,2) + math.pow(self.ydifference,2) )
                            
                        #Angle in which object moves
                        self.movAngle = math.degrees(math.atan(self.ratio))
                        
                        #The speed set for the object
                        self.enemiesList[eindex+1].dx = 3*math.cos(math.radians(self.movAngle))
                        self.enemiesList[eindex+1].dy = 3*math.sin(math.radians(self.movAngle))
                        self.enemiesList[eindex].dx = 3*math.cos(math.radians(self.movAngle))
                        self.enemiesList[eindex].dy = 3*math.sin(math.radians(self.movAngle))
                        

                        if self.enemiesList[eindex].x < self.enemiesList[eindex+1].x :
                            self.enemiesList[eindex+1].dx *= -1
                        if self.enemiesList[eindex].y < self.enemiesList[eindex+1].y:
                            self.enemiesList[eindex+1].dy *= -1
                        if self.enemiesList[eindex].x > self.enemiesList[eindex+1].x :
                            self.enemiesList[eindex].dx *= -1
                        if self.enemiesList[eindex].y > self.enemiesList[eindex+1].y:
                            self.enemiesList[eindex].dy *= -1
                        
                    
                        self.enemiesList[eindex+1].x += self.enemiesList[eindex+1].dx
                        self.enemiesList[eindex+1].y += self.enemiesList[eindex+1].dy
                        self.enemiesList[eindex].x += self.enemiesList[eindex].dx
                        self.enemiesList[eindex].y += self.enemiesList[eindex].dy
                        


        #Reconnection of Enemies'cells
        for eindex in range (len(self.enemiesList)):
            if eindex < (len(self.enemiesList)-1):
                if cd.ecircleCollision(self.enemiesList[eindex],self.enemiesList[eindex+1]):
                    print("collide")
                    self.time = 0
                    self.timer = False
                    self.enemiesList[eindex].size += self.enemiesList[eindex+1].size
                    self.enemiesList.remove(self.enemiesList[eindex+1])
                                                      
                    
        

    # end runLogic()


    def displayFrame(self):
        # Draw Commands
        self.screen.fill(COLOUR[BLACK])

        #Draw Enemies Cells
        for enemies in self.enemiesList:
            enemies.draw(self.screen)

        # Update screen
        pygame.display.flip()

    # end displayFrame()

# end Game() class    


# Create a Game object to begin
Game()
